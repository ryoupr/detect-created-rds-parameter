#!/usr/bin/env bash

# RDSÊöóÂè∑ÂåñÁõ£Êüª„Ç∑„Çπ„ÉÜ„É† „ÉÜ„Çπ„ÉàÁí∞Â¢É„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà
# ÊîπËâØÁÇπ:
#  - set -euo pipefail „ÅßÂé≥Ê†ºÂåñ
#  - Áí∞Â¢ÉÂ§âÊï∞„Å´„Çà„ÇãÂØæË±°Âà∂Âæ° (SKIP_DB_DELETE „Å™„Å©)
#  - ÂâäÈô§ÂæÖÊ©ü„Çí‰∏¶ÂàóÂåñ („Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ) „ÅóÊôÇÈñìÁü≠Á∏Æ
#  - Êó¢Â≠ò„Åó„Å™„ÅÑ„É™„ÇΩ„Éº„Çπ„ÅØË≠¶Âëä„ÅÆ„Åø
set -euo pipefail

REGION=${AWS_DEFAULT_REGION:-${REGION:-"ap-northeast-1"}}
APP_TAG_KEY=${APP_TAG_KEY:-Application}
APP_TAG_VALUE=${APPLICATION_TAG_VALUE:-detect-created-rds-parameter-test}
# ÔºàÂÆåÂÖ®„Çø„Ç∞„Éô„Éº„ÇπÂâäÈô§„Å´ÁßªË°å: ‰ª•‰∏ã„ÅÆÂêçÂâçÊåáÂÆö„ÅØ‰∫íÊèõÁ∂≠ÊåÅ„ÅÆ„Åü„ÇÅÊÆã„Åô„Åå„É≠„Ç∏„ÉÉ„ÇØ„Åß„ÅØ‰ΩøÁî®„Åó„Å™„ÅÑÔºâ
MYSQL_INSTANCE_ID=${MYSQL_INSTANCE_ID:-""}
POSTGRES_INSTANCE_ID=${POSTGRES_INSTANCE_ID:-""}
DB_SUBNET_GROUP_NAME=${DB_SUBNET_GROUP_NAME:-""}
SECURITY_GROUP_NAME=${SECURITY_GROUP_NAME:-""}
MYSQL_PG_NAME=${MYSQL_PG_NAME:-""}
POSTGRES_PG_NAME=${POSTGRES_PG_NAME:-""}
SKIP_DB_DELETE=${SKIP_DB_DELETE:-"false"}
NO_WAIT=${NO_WAIT:-"false"}
DELETE_TAGGED_VPC=${DELETE_TAGGED_VPC:-"true"}   # false „Å´„Åô„Çã„Å® VPC/„Çµ„Éñ„Éç„ÉÉ„ÉàÊ∏©Â≠ò

echo "üßπ RDS„ÉÜ„Çπ„ÉàÁí∞Â¢É„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÈñãÂßã„Åó„Åæ„Åô"

ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region "$REGION")

echo "üåç „É™„Éº„Ç∏„Éß„É≥: $REGION"
echo "üë§ „Ç¢„Ç´„Ç¶„É≥„Éà: $ACCOUNT_ID"
echo "üè∑Ô∏è ÂâäÈô§ÂØæË±°„Çø„Ç∞: $APP_TAG_KEY=$APP_TAG_VALUE (ÂÆåÂÖ®„Çø„Ç∞„Éô„Éº„Çπ)"

echo -e "\n0. „Çø„Ç∞„Çπ„Ç≠„É£„É≥"

# --- „Éò„É´„Éë ---
has_tag() { # arn
    local arn="$1"; local key="$APP_TAG_KEY"; local val="$APP_TAG_VALUE"
    aws rds list-tags-for-resource --resource-name "$arn" --region "$REGION" \
        --query "TagList[?Key=='$key' && Value=='$val'] | length(@)" --output text 2>/dev/null || echo 0
}

# RDS„Ç§„É≥„Çπ„Çø„É≥„Çπ (DB / Cluster) ÂàóÊåô
TAGGED_DB_INSTANCES=()
while read -r dbid; do
    [[ -z $dbid || $dbid == None ]] && continue
    ARN="arn:aws:rds:$REGION:$ACCOUNT_ID:db:$dbid"
    if [[ $(has_tag "$ARN") -gt 0 ]]; then TAGGED_DB_INSTANCES+=("$dbid"); fi
done < <(aws rds describe-db-instances --region "$REGION" --query 'DBInstances[].DBInstanceIdentifier' --output text 2>/dev/null | tr '\t' '\n')

TAGGED_DB_CLUSTERS=()
while read -r cid; do
    [[ -z $cid || $cid == None ]] && continue
    CARN="arn:aws:rds:$REGION:$ACCOUNT_ID:cluster:$cid"
    if [[ $(has_tag "$CARN") -gt 0 ]]; then TAGGED_DB_CLUSTERS+=("$cid"); fi
done < <(aws rds describe-db-clusters --region "$REGION" --query 'DBClusters[].DBClusterIdentifier' --output text 2>/dev/null | tr '\t' '\n')

# „Éë„É©„É°„Éº„Çø„Ç∞„É´„Éº„Éó (DB / Cluster ‰∏°Êñπ)
TAGGED_PGS=()
while read -r pg; do
    [[ -z $pg || $pg == None ]] && continue
    ARN="arn:aws:rds:$REGION:$ACCOUNT_ID:pg:$pg"
    if [[ $(has_tag "$ARN") -gt 0 ]]; then TAGGED_PGS+=("$pg"); fi
done < <(aws rds describe-db-parameter-groups --region "$REGION" --query 'DBParameterGroups[].DBParameterGroupName' --output text 2>/dev/null | tr '\t' '\n')

TAGGED_CLUSTER_PGS=()
while read -r cpg; do
    [[ -z $cpg || $cpg == None ]] && continue
    CPG_ARN="arn:aws:rds:$REGION:$ACCOUNT_ID:cluster-pg:$cpg"
    if [[ $(has_tag "$CPG_ARN") -gt 0 ]]; then TAGGED_CLUSTER_PGS+=("$cpg"); fi
done < <(aws rds describe-db-cluster-parameter-groups --region "$REGION" --query 'DBClusterParameterGroups[].DBClusterParameterGroupName' --output text 2>/dev/null | tr '\t' '\n')

# DB Subnet Group („Çø„Ç∞ API ÂØæÂøú)
TAGGED_SUBNET_GROUPS=()
while read -r sg; do
    [[ -z $sg || $sg == None ]] && continue
    ARN="arn:aws:rds:$REGION:$ACCOUNT_ID:subgrp:$sg"
    if [[ $(has_tag "$ARN") -gt 0 ]]; then TAGGED_SUBNET_GROUPS+=("$sg"); fi
done < <(aws rds describe-db-subnet-groups --region "$REGION" --query 'DBSubnetGroups[].DBSubnetGroupName' --output text 2>/dev/null | tr '\t' '\n')

echo "  - Tagged DB Instances       : ${TAGGED_DB_INSTANCES[*]:-(none)}"
echo "  - Tagged DB Clusters        : ${TAGGED_DB_CLUSTERS[*]:-(none)}"
echo "  - Tagged ParameterGroups    : ${TAGGED_PGS[*]:-(none)}"
echo "  - Tagged ClusterParamGroups : ${TAGGED_CLUSTER_PGS[*]:-(none)}"
echo "  - Tagged SubnetGroups       : ${TAGGED_SUBNET_GROUPS[*]:-(none)}"

# „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁµ±Âêà (ÁÑ°ÂäπÂåñÊ∏à: ÂÆåÂÖ®„Çø„Ç∞„Éô„Éº„Çπ)

# 1. RDS„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆÂâäÈô§
echo -e "\n1. RDS„ÉÜ„Çπ„Éà„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆÂâäÈô§"

TEST_INSTANCES=("${TAGGED_DB_INSTANCES[@]}")
TEST_CLUSTERS=("${TAGGED_DB_CLUSTERS[@]}")
if [[ "$SKIP_DB_DELETE" == "true" ]]; then
    echo "‚è≠Ô∏è  SKIP_DB_DELETE=true „ÅÆ„Åü„ÇÅ RDS „Ç§„É≥„Çπ„Çø„É≥„ÇπÂâäÈô§„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô";
else
    for INSTANCE_ID in "${TEST_INSTANCES[@]}"; do
        if aws rds describe-db-instances --db-instance-identifier "$INSTANCE_ID" --region "$REGION" --query 'DBInstance' >/dev/null 2>&1; then
        # Êó¢„Å´„Çø„Ç∞„Éô„Éº„Çπ„ÅßÊäΩÂá∫Ê∏à
        echo "üóëÔ∏è RDS„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂâäÈô§‰∏≠: $INSTANCE_ID"
        
        # ÂâäÈô§‰øùË≠∑„ÅÆÁÑ°ÂäπÂåñ
        aws rds modify-db-instance \
                        --db-instance-identifier "$INSTANCE_ID" \
            --no-deletion-protection \
            --apply-immediately \
                        --region "$REGION" &>/dev/null || true
            
        # „Ç§„É≥„Çπ„Çø„É≥„ÇπÂâäÈô§
        aws rds delete-db-instance \
                        --db-instance-identifier "$INSTANCE_ID" \
            --skip-final-snapshot \
            --delete-automated-backups \
                        --region "$REGION" || echo "‚ö†Ô∏è ÂâäÈô§„Ç≥„Éû„É≥„ÉâÂ§±Êïó: $INSTANCE_ID"
        
        echo "‚úÖ $INSTANCE_ID „ÅÆÂâäÈô§„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü"
    else
        echo "‚ÑπÔ∏è RDS„Ç§„É≥„Çπ„Çø„É≥„Çπ $INSTANCE_ID „ÅØÂ≠òÂú®„Åó„Åæ„Åõ„Çì"
    fi
    done
fi

# „ÇØ„É©„Çπ„ÇøÂâäÈô§ (ÂÖà„Å´„Ç§„É≥„Çπ„Çø„É≥„ÇπÂâäÈô§„ÅåÈÄ≤Ë°å‰∏≠„Åß„ÅÇ„Çã„Åì„Å®ÂâçÊèê)
if [[ ${#TEST_CLUSTERS[@]} -gt 0 ]]; then
    echo -e "\n1b. RDS„ÇØ„É©„Çπ„Çø„ÅÆÂâäÈô§"
    for CID in "${TEST_CLUSTERS[@]}"; do
        if aws rds describe-db-clusters --db-cluster-identifier "$CID" --region "$REGION" &>/dev/null; then
            echo "üóëÔ∏è RDS„ÇØ„É©„Çπ„ÇøÂâäÈô§‰∏≠: $CID"
            aws rds delete-db-cluster --db-cluster-identifier "$CID" --skip-final-snapshot --region "$REGION" 2>/dev/null || echo "‚ö†Ô∏è ÂâäÈô§Â§±Êïó: $CID"
        fi
    done
fi

# „Ç§„É≥„Çπ„Çø„É≥„ÇπÂâäÈô§„ÅÆÂÆå‰∫Ü„ÇíÂæÖÊ©ü
if [[ "$SKIP_DB_DELETE" == "false" && "$NO_WAIT" == "false" ]]; then
    echo -e "\n‚è≥ RDS„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆÂâäÈô§ÂÆå‰∫Ü„ÇíÂæÖÊ©ü‰∏≠..."
    for INSTANCE_ID in "${TEST_INSTANCES[@]}"; do
            if aws rds describe-db-instances --db-instance-identifier "$INSTANCE_ID" --region "$REGION" &>/dev/null; then
                    echo "  - $INSTANCE_ID „ÅÆÂâäÈô§ÂÆå‰∫ÜÂæÖÊ©ü..."
                    (aws rds wait db-instance-deleted --db-instance-identifier "$INSTANCE_ID" --region "$REGION" && echo "    ‚úÖ $INSTANCE_ID ÂâäÈô§ÂÆå‰∫Ü") &
            fi
    done
    wait || true
    echo "‚úÖ RDS„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆÂâäÈô§ÂæÖÊ©üÂá¶ÁêÜÂÆå‰∫Ü"
fi

# 2. „Éë„É©„É°„Éº„Çø„Éº„Ç∞„É´„Éº„Éó„ÅÆÂâäÈô§
echo -e "\n2. „ÉÜ„Çπ„ÉàÁî®„Éë„É©„É°„Éº„Çø„Éº„Ç∞„É´„Éº„Éó„ÅÆÂâäÈô§"

for PG_NAME in "${TAGGED_PGS[@]}"; do
    if aws rds describe-db-parameter-groups --db-parameter-group-name $PG_NAME --region $REGION &>/dev/null; then
        echo "üóëÔ∏è „Éë„É©„É°„Éº„Çø„Éº„Ç∞„É´„Éº„ÉóÂâäÈô§: $PG_NAME"
        aws rds delete-db-parameter-group --db-parameter-group-name $PG_NAME --region $REGION || echo "‚ö†Ô∏è ÂâäÈô§Â§±Êïó $PG_NAME"
        echo "‚úÖ $PG_NAME ÂâäÈô§ÈñãÂßã"
    fi
done
for CPG_NAME in "${TAGGED_CLUSTER_PGS[@]}"; do
    if aws rds describe-db-cluster-parameter-groups --db-cluster-parameter-group-name $CPG_NAME --region $REGION &>/dev/null; then
        echo "üóëÔ∏è „ÇØ„É©„Çπ„Çø„Éë„É©„É°„Éº„Çø„Éº„Ç∞„É´„Éº„ÉóÂâäÈô§: $CPG_NAME"
        aws rds delete-db-cluster-parameter-group --db-cluster-parameter-group-name $CPG_NAME --region $REGION || echo "‚ö†Ô∏è ÂâäÈô§Â§±Êïó $CPG_NAME"
        echo "‚úÖ $CPG_NAME ÂâäÈô§ÈñãÂßã"
    fi
done

# 3. DB„Çµ„Éñ„Éç„ÉÉ„Éà„Ç∞„É´„Éº„Éó„ÅÆÂâäÈô§
echo -e "\n3. DB„Çµ„Éñ„Éç„ÉÉ„Éà„Ç∞„É´„Éº„Éó„ÅÆÂâäÈô§"
for sg in "${TAGGED_SUBNET_GROUPS[@]}"; do
    if aws rds describe-db-subnet-groups --db-subnet-group-name "$sg" --region "$REGION" &>/dev/null; then
        echo "üóëÔ∏è DB„Çµ„Éñ„Éç„ÉÉ„Éà„Ç∞„É´„Éº„ÉóÂâäÈô§: $sg"
        aws rds delete-db-subnet-group --db-subnet-group-name "$sg" --region "$REGION" || echo "‚ö†Ô∏è ÂâäÈô§Â§±Êïó $sg"
        echo "‚úÖ $sg ÂâäÈô§ÈñãÂßã"
    fi
done
[[ ${#TAGGED_SUBNET_GROUPS[@]} -eq 0 ]] && echo "‚ÑπÔ∏è „Çø„Ç∞‰∏ÄËá¥ DB„Çµ„Éñ„Éç„ÉÉ„Éà„Ç∞„É´„Éº„Éó „Å™„Åó"

# 4. „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„Éó„ÅÆÂâäÈô§ (VPCÂâäÈô§Ââç)
echo -e "\n4. „ÉÜ„Çπ„ÉàÁî®„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„Éó„ÅÆÂâäÈô§"
SECURITY_GROUP_IDS=$(aws ec2 describe-security-groups --filters "Name=tag:$APP_TAG_KEY,Values=$APP_TAG_VALUE" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text --region "$REGION" 2>/dev/null || echo "")
if [[ -n $SECURITY_GROUP_IDS ]]; then
    for sgid in $SECURITY_GROUP_IDS; do
        echo "üóëÔ∏è „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„ÉóÂâäÈô§: $sgid"; aws ec2 delete-security-group --group-id "$sgid" --region "$REGION" 2>/dev/null || echo "‚ö†Ô∏è Â§±Êïó: $sgid"; done
else
    echo "‚ÑπÔ∏è „Çø„Ç∞‰∏ÄËá¥„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„Éó„Å™„Åó"
fi

# 5. „Çø„Ç∞‰ªò„Åç VPC / „Çµ„Éñ„Éç„ÉÉ„Éà„ÅÆÂâäÈô§
echo -e "\n5. „Çø„Ç∞‰ªò„Åç VPC / „Çµ„Éñ„Éç„ÉÉ„Éà„ÅÆÂâäÈô§"
if [[ $DELETE_TAGGED_VPC == true || $DELETE_TAGGED_VPC == "true" ]]; then
    VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:$APP_TAG_KEY,Values=$APP_TAG_VALUE" --query 'Vpcs[0].VpcId' --output text --region "$REGION" 2>/dev/null || echo None)
    if [[ $VPC_ID != None ]]; then
        SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:$APP_TAG_KEY,Values=$APP_TAG_VALUE" --query 'Subnets[].SubnetId' --output text --region "$REGION" || true)
        for sn in $SUBNET_IDS; do
            echo "üóëÔ∏è Subnet ÂâäÈô§: $sn"; aws ec2 delete-subnet --subnet-id "$sn" --region "$REGION" 2>/dev/null || echo "‚ö†Ô∏è Subnet ÂâäÈô§Â§±Êïó: $sn"; done
        echo "üóëÔ∏è VPC ÂâäÈô§: $VPC_ID"; aws ec2 delete-vpc --vpc-id "$VPC_ID" --region "$REGION" 2>/dev/null || echo "‚ö†Ô∏è VPC ÂâäÈô§Â§±Êïó (‰æùÂ≠ò„É™„ÇΩ„Éº„ÇπÊÆãÂ≠ò„ÅÆÂèØËÉΩÊÄß)"
        VPC_DELETED=$VPC_ID
    else
        echo "‚ÑπÔ∏è „Çø„Ç∞‰∏ÄËá¥ VPC „Å™„Åó"
    fi
else
    echo "‚è≠Ô∏è DELETE_TAGGED_VPC=false „ÅÆ„Åü„ÇÅ VPC/„Çµ„Éñ„Éç„ÉÉ„ÉàÂâäÈô§„Çπ„Ç≠„ÉÉ„Éó"
fi

echo -e "\n‚úÖ „ÉÜ„Çπ„ÉàÁí∞Â¢É„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ"
echo ""
echo "üìã ÂâäÈô§„Åï„Çå„Åü„É™„ÇΩ„Éº„Çπ:"
if [[ "$SKIP_DB_DELETE" == "false" ]]; then
    echo "  - RDS„Ç§„É≥„Çπ„Çø„É≥„Çπ: ${TEST_INSTANCES[*]:-(none)}"
else
    echo "  - RDS„Ç§„É≥„Çπ„Çø„É≥„Çπ: (ÂâäÈô§„Çπ„Ç≠„ÉÉ„Éó)"
fi
echo "  - „Éë„É©„É°„Éº„Çø„Éº„Ç∞„É´„Éº„Éó: ${TAGGED_PGS[*]:-(none)}"
echo "  - „ÇØ„É©„Çπ„ÇøPG: ${TAGGED_CLUSTER_PGS[*]:-(none)}"
echo "  - DB„Çµ„Éñ„Éç„ÉÉ„Éà„Ç∞„É´„Éº„Éó: ${TAGGED_SUBNET_GROUPS[*]:-(none)}"
echo "  - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„Éó: ${SECURITY_GROUP_IDS:-none}"
if [[ ${VPC_DELETED:-} ]]; then
    echo "  - VPC: $VPC_DELETED (Èñ¢ÈÄ£„Çµ„Éñ„Éç„ÉÉ„ÉàÂê´„ÇÄ)"
else
    if [[ $DELETE_TAGGED_VPC == true || $DELETE_TAGGED_VPC == "true" ]]; then
        echo "  - VPC: (ÂØæË±°„Å™„Åó or ÂâäÈô§Â§±Êïó)"
    else
        echo "  - VPC: (ÂâäÈô§„Çπ„Ç≠„ÉÉ„Éó)"
    fi
fi
echo ""
echo "üí° ‰ªªÊÑè: DELETE_TAGGED_VPC=false „Åß VPC ‰øùÊåÅÂèØËÉΩ"
echo ""
echo "üîç ÂâäÈô§„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åü„Åã„Å©„ÅÜ„Åã„ÅØ„ÄÅAWS„Ç≥„É≥„ÇΩ„Éº„É´„ÅßÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö"
echo "   https://console.aws.amazon.com/rds/home?region=$REGION"
